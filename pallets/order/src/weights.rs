
//! Autogenerated weights for `pallet_order`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sulijia-pc`, CPU: `AMD Ryzen 7 5800U with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-magnet-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_order
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/order/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;
use frame_support::weights::constants::RocksDbWeight;

pub trait WeightInfo {
	fn set_parameter(s: Option<u32>, ) -> Weight;
}
/// Weight functions for `pallet_order`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `OrderPallet::SlotWidth` (r:0 w:1)
	/// Proof: `OrderPallet::SlotWidth` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OrderPallet::TxPoolThreshold` (r:0 w:1)
	/// Proof: `OrderPallet::TxPoolThreshold` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `OrderPallet::OrderMaxAmount` (r:0 w:1)
	/// Proof: `OrderPallet::OrderMaxAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn set_parameter(_s: Option<u32>, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_649_000 picoseconds.
		Weight::from_parts(5_090_860, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

impl WeightInfo for () {
	fn set_parameter(_s: Option<u32>, ) -> Weight {
		Weight::from_parts(5_090_860, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 2_411
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}